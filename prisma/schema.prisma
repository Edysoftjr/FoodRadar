// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences
  budget        Int?
  preferences   String[]  @default([])
  location      Json?     // { latitude: number, longitude: number, address: string }
  phone         String?

  // Relations
  restaurants   Restaurant[]
  orders        Order[]
  reviews       Review[]
  favorites     Favorite[]
  mealFavorites MealFavorite[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  coordinates Json     // { latitude: number, longitude: number }
  images      String[] @default([])
  categories  String[] @default([])
  priceRange  Json     // { min: number, max: number, average: number }
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  openingHours Json?   // { monday: { open: string, close: string }, ... }
  phone       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  meals       Meal[]
  orders      Order[]
  reviews     Review[]
  favorites   Favorite[]

  @@map("restaurants")
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int
  image       String?
  categories  String[] @default([])
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  orderItems   OrderItem[]
  favorites    MealFavorite[]

  @@map("meals")
}

model Order {
  id                String      @id @default(cuid())
  status            OrderStatus @default(PENDING)
  total             Int
  deliveryLocation  Json        // { latitude: number, longitude: number, address: string }
  contactPhone      String
  specialInstructions String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: SetNull)
  restaurantId  String
  items         OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Int
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: SetNull)
  mealId    String

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  images    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  @@unique([userId, restaurantId])
  @@map("favorites")
}

model MealFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId    String

  @@unique([userId, mealId])
  @@map("meal_favorites")
}
